{"title":"Tuto1","markdown":{"yaml":{"title":"Tuto1","format":"html"},"headingText":"[I-How to install R?]{style=\"color: steelblue;\"}","containsRefs":false,"markdown":"\n\n### Usefull link\n\nTo install Cran R, you must go to https://cran.r-project.org/, and download the exe for your favorite operating system, click on the .exe, .dmg, .pkg, .deb, respectively for Windows, MacOS and Linux-debian.\n\nAnd click on follow... until to reach successful installation\nThen download and install the IDE Rstudio clik [here](https://posit.co/products/open-source/rstudio/).\n\n*Everything is free to download*\n\n### First command\n**Where I am ?**\n\n```{r}\ngetwd()\n```\n\n\n**How can I change my working directory in command line**\n\n```{r eval=FALSE}\nsetwd(\"/Users/marcgarel/OSU/Cours_R/\")\n```\n\n\nOn Rstudio, we can change of working directory by navigating in folder in **File** panel and clicking on menu **More**\n\n**How can I find documentation about function?**\n\nThe command `help()` is the 911\n\n```{r eval=FALSE}\n# exemple with function read.table\nhelp(\"read.table\")\n#other exemple of 911\nexample(\"plot\")\n??plot()\n```\n\n## [II-How to install new package?]{style=\"color: steelblue;\"}\n### Packages intallation\n\nTwo ways for installing new packages by clicking directly in Rstudio or by command line (the best way for me)\n\n```{r eval=FALSE}\ninstall.packages(\"your package\") # for packages on CRAN mirror\n```\n\n\nFor the packages on Bioconductor (specifically for bioinformatic) or package from github\n\n```{r eval=FALSE}\nBiocManager::install(\"your packages\") # for bioconductor\n\ndevtools::install_github(\"your package\") # need to previously install devtools package\n```\n\n\n### Load pacakge to use funtion inside\n\n```{r eval=FALSE}\n# First solution : need to create a session with all necessary packages\nlibrary(\"your package1\")\nlibrary(\"your package2\")\nlibrary(\"your package3\")\n```\n\n```{r eval=FALSE}\n#Or without load the package using this command your package::yourfunction()\ndada2::mergePairs()\n```\n\n**<span style=\"color: red;\">On your R session using cloud IFB all the necessary packages are installed</span>**\n\n## [III-Expression and Affectation]{style=\"color: steelblue;\"}\n## Expression\n\nExpression is directly evaluated by **R** and the result is displayed on terminal\nExample : \n\n```{r eval=FALSE}\n2+3\nsqrt(25)\n```\n\n\n## Affectation in object\nAn assignment is an expression (mathematical operation, vector, matrix, data.frame, list) stored in object. To store expression in object, we choose a simple name, and we use `=` or `<-` to store value inside the object.\n\nExample :\n\n```{r}\na=2+3\nb=\"madame\"\n```\n\n**<span style=\"color: red;\"> What happens when you execute this cell?</span>**\n\n```{r}\na\nb\n```\n\n```{r eval=FALSE}\na=10\nb=\"5\"\nsomme<-a+b\n```\n**<span style=\"color: red;\"> Why do we have an error ? I need to know the type of the object</span>**\n```{r eval=FALSE}\nstr(a)\nstr(b)\n```\n**<span style=\"color: red;\"> What kind of information do we get?</span>**\n\nWe can also perform mathematical operations on numerical objects.\n\n```{r}\nlog(a) # to obtain the logarithm of a\nsqrt(a)# to obtain the square root of a\n```\n\n```{r}\n# we can compare it\nlog(a)>sqrt(a)\n```\n\n\n## Different type of object\n### <span style=\"color: red;\">The vector</span>\n\nThe vectors is an object composed by value with the same mode (i.e, numeric, characters...)\n\n```{r}\nV1<-c(2,6,9) # numeric vector\nV2<-c(\"monday\",\"Tuesday\",\"Wednesday\")# character vector\nV3<-rep(6, 3) # repetition of the same value\nV4=seq(1,3,0.1)\nV5=c(1:100)\nV5\n# sequence of number\n# to know the number of value inside a vector\nlength(V1)\n\n# continue with other Vector\n# What do you think in V4?\n```\n\n\n```{r}\n#Filtering a vector according to criteria\n# Example : with list of value (a vector)\n\nx = c(1,3,5,3,2,1,4,6,4,7,5,4,3)\n\n# get element from 2 to 6\n\nx[2:6]\n\n# get elements 3 et 5 from x.\n\nx[c(3,5)]\n\n# get value more than 5.\n\nx[x>5]\n\n# get value of  x where x is equal to 5.\n\nx[x==5]\n\n# return elements form x the the value different from 5\n\nx[x!=5] \n```\n\n```{r}\n#Filter a vector according to several criteria\n\n# 3 lists : ages, sexes et poids\n\nage = c(20,30,40,15,22,24,36,38)\n\nsexe = c(\"F\",\"M\",\"F\",\"M\",\"F\",\"M\",\"F\",\"M\")\n\npoids =c(75,76,73,72,64,76,73,72)\n\n# get value from age greater than 20 and less than 30.\n\nage[age>20&age<30]\n\n# Recovering \"poids\" for those who are older than 25 and female\n\npoids[age>25&sexe==\"F\"]\n\n#Retrieve age values below 20 or above 30.\n\nage[age<20|age>30]\n```\n\n\n\n*Exo1*\n\nThis is the vector a=c(\"lannister\", \"targaryen\", \"baratheon\", \"starck\", \"greyjoy\")\n\n1. What is the length of the vector?\n\n2. Try doing a [1:3]. What do you get?\n\n3. Create a new vector b containing only lannister and starck.\n\n4. Try doing a[-1]. What do you get?\n\n5. Sort by alphabetical order. clue: sort ?\n\n*Exo2*\n\n1. Create a vector a containing all integers from 1 to 100.\n\n2. Add the values 200, 201, 202 to the vector a.\n\n3. Create a vector b containing all even integers from 2 to 100. clue : seq?\n\n\n#### [Data frame]{style=\"color: red;\"}\n\nThe data frame is an object composed by vector where the value are [in the different mode}{style=\"color: steelblue;\"} (i.e, numeric, characters...)\n\n##### Exemple of data frame\n\n```{r}\nlibrary(datasets) #load packages with example of datasets\ndata(iris) #loads data frame\nstr(iris) # return the different type of vector\nView(iris) # view data frame in a table\n```\n\n```{r}\n# Get value inside data.frame\niris[3] # to get 3rd value from the first line \niris[3,4] # data[line, column]\niris[5:10,2:4] # to get value from the line 5 to 10  for the columns/variables 2 to 4\niris[5:10,]  # to get value from the line 5 to 10 for all  columns\niris[,3] # to all lines form third column (or vector)\niris$Petal.Length # to all lines form Petal.Length vecotor\n```\n\n##### How to build your own data frame\n\n```{r}\ndate<-c(\"1_monday\",\"2_Tuesday\",\"3_Wednesday\", \"4_Thursday\",\"5_Friday\", \"6_Sturday\", \"7_Sunday\")\ntemperature<-c(24,27,25,22,30,21,28)# deg Celsius\nrain<-c(1,0,0,5,2,0,0)# rain in mm\n\ndf<-data.frame(date, temperature,rain)# makes data.frame\n\n#To select a column or vector. We use $ to target a vector inside a data frame\ndf$temperature\n\ndf$temperature[2] # to obtain the 2nd element of the vector temperature. \n\n# Bonus adding a line in our data frame\nday<-list(\"8_monday\", 29, 1)# here we use list() instead of c() because there is multiple class in inside row\nnew_def<-rbind(df,day)# add row to a data frame\nnew_def\n```\n\n## [IV-Some useful functions on data frame]{style=\"color: steelblue;\"}\n### Definition\nThe function are a compilation of command line with different instructions inside one object to simplify code. A function is composed by <span style=\"color: steelblue;\">**arguments**</span> and <span style=\"color: steelblue;\">**options**</span>.\n\nfunction(argument1, argument2, option1, ... ,option10)\n\n\n### Usual functions for data frame\n\n```{r eval=FALSE}\nhead() # to know first line of your data frame\nclass()# return the class of the object. Ex : data.frame, matrix, list ....\nstr()# return the structure of the object. Ex : numeric, factor, character....\nnames()# to get or set the names of an object\nsum() # for addition\nmin() # return the minimum of the vector\nmax() # return the minimum of the vector\nrow.names() # attribute names for lines of the data frame\ncolnames() # attribute names for column of the data frame\napply() # Returns a vector or array or list of values obtained by applying a function to margins of an array or matrix.\n```\n\n\n**Example function row.names, class and str**\n```{r}\ndf2 <- data.frame(x = c(TRUE, FALSE, NA, NA), y = c(12, 34, 56, 78))\ndf2\nrow.names(df2) <- 1 : 4 # give number of lines as names of the row\ncolnames(df2) <- c(\"Ilove\", \"R\")\ndf2 # what do you see\nclass(df2)\nstr(df2)\n```\n\n\n**Example function apply**\n\n```{r}\nhead(df)\nclass(df)\nstr(df)\napply(df[,2:3], 2, mean)# return mean for the numerical column of the data.frame. apply(data,margin,fun). For margin parameter the value 1 return mean for each row, for margin=2 return mean for each selected column.\n```\n\n*Exo 3*\n\n**From data set iris in package **datasets** Load package datasets and load data set iris using `data()`\n\n1.  Give the class Sepal.Width and Species vectors\n2.  What is the minimum / maximum / average sepal length of these irises?\n3.  What are the values of the first 10 irises?\n4.  Calculate standard deviation for every numeric vector (function : `sd()`)\n5.  Calculate mean for every numeric vector\n6.  Create a data frame with mean and sd as line and give a name for each line\n7.  An error of 0.5cm was made in the measurement of the length of the sepal of the 41st iris: add 0.5cm to this measurement\n\n### Use Tidyverse package to select, filter data in a data frame\n\n[\"tidyverse\"](https://www.tidyverse.org/) is the contraction of \"tidy\" and \"universe\", it's a tidy universe if we translate word by word. In fact, it is a set of R packages that are designed to work together and thus follow the same code logic and a common grammar.\n\nThe most commonly used tidyverse packages are loaded in your session:\n\n- [`ggplot2`](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)\n- [`dplyr`](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf)\n- [`tidyr`](https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf)\n- [`readr`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf)\n- [`tibble`](https://r4ds.had.co.nz/tibbles.html)\n- [`stringr`](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)\n\n\n```{r}\ntidyverse::tidyverse_packages()\n```\n\n##### Filter and select variable in data frame\n\n```{r}\ndata(\"iris\")\n#To select a variable with tidyverse\ndplyr::select(iris, Species)\n```\n\n```{r}\n#To select several variables with tidyverse\ndplyr::select(iris,Species, Sepal.Length, Sepal.Width)\n\n# To select several lines inside data frame \ndplyr::slice(iris,22:30)\n# I can affect it to an object \n\nsubdata=dplyr::slice(iris,22:30)\n\n#or choosing different lines\nmyline=c(22, 38, 120) # I build a vector containing the line that I want\ndplyr::slice(iris,myline)\n```\n\n##### Bonus : to pipe many function serval function together\n\nThe pipe <span style=\"color: steelblue;\"> **>|** </span>, or <span style=\"color: steelblue;\">**%>%**</span>, is one of the useful elements of the tidyverse. It allows to structure sequences of operations by minimizing the creation of intermediate objects and by facilitating the addition of a step anywhere in this sequence.\n\nThe useful command to manage data frame : 1) select() to select vector or variable from a data frame ; 2) filter() is used to subset a data frame, retaining all rows that satisfy your conditions ; mutate() adds new variables and preserves existing ones.\n\n\n```{r}\nlibrary(dplyr)\niris %>%\nfilter(Sepal.Length > 6) %>% # filtered using size of Sepal Length\nfilter(Species == \"versicolor\") # and the species \n\n```\n\n```{r}\niris %>%\n select(Sepal.Length, Species) %>%\n mutate(Sepal.Length2 = Sepal.Length * 2)%>%\n mutate(Sepal.Length2_squared = Sepal.Length2 * Sepal.Length2)\n\niris %>%\n  select(Sepal.Length, Species) %>%\n  mutate(Sepal.Length = Sepal.Length / mean(Sepal.Length, na.rm = TRUE))\n\n#Sepal.Length_norm is calculated using the mean of the Sepal.Length for all data set.\n\niris %>%\n  select(Sepal.Length, Species) %>%\n  group_by(Species) %>%\n  mutate(Sepal.Length_norm = Sepal.Length / mean(Sepal.Length, na.rm = TRUE))\n\n# In this last example Sepal.Length_norm is calculated using the mean of the Sepal.Length for each species using group_by()\n```\n\n**<span style=\"color: red;\"> These commands are non-persistent, no changes are made on the original iris data frame.</span>**\n**<span style=\"color: red;\">If you want to store it, you must assign your changes to a object</span>**\n\n\n```{r}\niris_modif<-iris %>%\n  select(Sepal.Length, Species) %>%\n  group_by(Species) %>%\n  mutate(Sepal.Length_norm = Sepal.Length / mean(Sepal.Length, na.rm = TRUE))\n```\n\n\n## [V-How to import external data frame issue from .txt or .csv]{style=\"color: steelblue;\"}\n\nTo import data set, the function read.table() or read.csv() commonly use.\n\n`read.table(file, header = FALSE, sep = \"\", dec = \".\", ...)`\n\nThe main parameter are :\n\n- **file** : add the pathway and the name of the file\n- **header** : a logical value (TRUE or FALSE)indicating whether the file contains the names of the variables as its first line. \n- **sep** : the field separator character. Values on each line of the file are separated by this character. If sep = \"\" (the default for read.table) the separator is ‘white space’, that is one or more spaces, tabs, newlines or carriage returns.\n- **dec** : the character used in the file for decimal points.\n\n```{r eval=FALSE}\nds <- read.table(here::here(\"data\",\n                            \"rforbeginers\",\n                            \"exemple_read.txt\"),\n                 header = TRUE,\n                 sep = \";\",\n                 dec = \",\")\n```\n\n\n<span style=\"color: steelblue;\">Why I use the parameter header=TRUE ?</span>\n\n#### To export data set as .txt to read in excel\n\nThe function is *write.table* similar to *read.table*\n\n`write.table(x, file = \"\", sep = \" \",na = \"NA\", dec = \".\", ... )`\n\n- **x** : this is your data.frame()\n- **file** : give a name for your file\n- **sep** : cf read.table\n- **dec** : cf read.table\n- **na** : give a symbole for missing data, by convention is NA\n\n```{r eval=FALSE}\nwrite.table(ds, \"ds.txt\", sep=\"\\t\", dec=\".\")\n```\n\nExo 4\n\n1. In the dataset Iris select Sepal Width, Sepal length and  Species,to create a new data frame name \"subset_iris\"\n2. Save this new data frame as text file \n\n## [VI-How to represent your data]{style=\"color: steelblue;\"}\n\n**ggplot2** is a powerfull packages to make a very smart graph \"ready to use\" for publication. **gg** means grammar and graph, a concept which describe a graph using grammar. This package belong to tidyverse according to `dplyr`. According to the ggplot2 concept, a graph can be divided into different basic parts:**Plot = data + Aesthetics + Geometry**\n\n- *data* : data frame\n- *aesthetics* : allows to indicate the x and y variables. It can also be used to control the color, size and shape of the points, etc...\n- *geometry* : corresponds to the type of graph (histogram, box plot, line plot, .....)\n\n```{r}\nlibrary(ggplot2)\n# scatter plot \nggplot(data = iris, aes(Sepal.Length, Sepal.Width))+ #  what I want to represent \n  geom_point() # how I represent it \n```\n\n```{r}\n# We can calorize and give a shape by month \n# scatter plot \nggplot(data = iris, aes(Sepal.Length, Sepal.Width))+ \n  geom_point(aes(color = Species, shape = Species)) # shape is the same thing with classical plot on R\n```\n```{r}\n# You can change manually color with la fonction scale_color_manual()\nggplot(data = iris, aes(Sepal.Length, Sepal.Width))+  \n geom_point(aes(color = Species, shape = Species))  +\n  scale_color_manual(values = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"))\n```\n```{r}\n#Boxplot \nggplot(data = iris, aes(Species, Sepal.Length))+ #  what I want to represent \n  geom_boxplot(aes(color=Species, fill=Species), alpha=0.4)+# how I represent it. Here I changed geometry using boxplot.\n  labs(x=\"Species\", y=\"Sepal.Length (mm)\")+\n  theme_minimal()\n```\n","srcMarkdownNoYaml":"\n\n## [I-How to install R?]{style=\"color: steelblue;\"}\n### Usefull link\n\nTo install Cran R, you must go to https://cran.r-project.org/, and download the exe for your favorite operating system, click on the .exe, .dmg, .pkg, .deb, respectively for Windows, MacOS and Linux-debian.\n\nAnd click on follow... until to reach successful installation\nThen download and install the IDE Rstudio clik [here](https://posit.co/products/open-source/rstudio/).\n\n*Everything is free to download*\n\n### First command\n**Where I am ?**\n\n```{r}\ngetwd()\n```\n\n\n**How can I change my working directory in command line**\n\n```{r eval=FALSE}\nsetwd(\"/Users/marcgarel/OSU/Cours_R/\")\n```\n\n\nOn Rstudio, we can change of working directory by navigating in folder in **File** panel and clicking on menu **More**\n\n**How can I find documentation about function?**\n\nThe command `help()` is the 911\n\n```{r eval=FALSE}\n# exemple with function read.table\nhelp(\"read.table\")\n#other exemple of 911\nexample(\"plot\")\n??plot()\n```\n\n## [II-How to install new package?]{style=\"color: steelblue;\"}\n### Packages intallation\n\nTwo ways for installing new packages by clicking directly in Rstudio or by command line (the best way for me)\n\n```{r eval=FALSE}\ninstall.packages(\"your package\") # for packages on CRAN mirror\n```\n\n\nFor the packages on Bioconductor (specifically for bioinformatic) or package from github\n\n```{r eval=FALSE}\nBiocManager::install(\"your packages\") # for bioconductor\n\ndevtools::install_github(\"your package\") # need to previously install devtools package\n```\n\n\n### Load pacakge to use funtion inside\n\n```{r eval=FALSE}\n# First solution : need to create a session with all necessary packages\nlibrary(\"your package1\")\nlibrary(\"your package2\")\nlibrary(\"your package3\")\n```\n\n```{r eval=FALSE}\n#Or without load the package using this command your package::yourfunction()\ndada2::mergePairs()\n```\n\n**<span style=\"color: red;\">On your R session using cloud IFB all the necessary packages are installed</span>**\n\n## [III-Expression and Affectation]{style=\"color: steelblue;\"}\n## Expression\n\nExpression is directly evaluated by **R** and the result is displayed on terminal\nExample : \n\n```{r eval=FALSE}\n2+3\nsqrt(25)\n```\n\n\n## Affectation in object\nAn assignment is an expression (mathematical operation, vector, matrix, data.frame, list) stored in object. To store expression in object, we choose a simple name, and we use `=` or `<-` to store value inside the object.\n\nExample :\n\n```{r}\na=2+3\nb=\"madame\"\n```\n\n**<span style=\"color: red;\"> What happens when you execute this cell?</span>**\n\n```{r}\na\nb\n```\n\n```{r eval=FALSE}\na=10\nb=\"5\"\nsomme<-a+b\n```\n**<span style=\"color: red;\"> Why do we have an error ? I need to know the type of the object</span>**\n```{r eval=FALSE}\nstr(a)\nstr(b)\n```\n**<span style=\"color: red;\"> What kind of information do we get?</span>**\n\nWe can also perform mathematical operations on numerical objects.\n\n```{r}\nlog(a) # to obtain the logarithm of a\nsqrt(a)# to obtain the square root of a\n```\n\n```{r}\n# we can compare it\nlog(a)>sqrt(a)\n```\n\n\n## Different type of object\n### <span style=\"color: red;\">The vector</span>\n\nThe vectors is an object composed by value with the same mode (i.e, numeric, characters...)\n\n```{r}\nV1<-c(2,6,9) # numeric vector\nV2<-c(\"monday\",\"Tuesday\",\"Wednesday\")# character vector\nV3<-rep(6, 3) # repetition of the same value\nV4=seq(1,3,0.1)\nV5=c(1:100)\nV5\n# sequence of number\n# to know the number of value inside a vector\nlength(V1)\n\n# continue with other Vector\n# What do you think in V4?\n```\n\n\n```{r}\n#Filtering a vector according to criteria\n# Example : with list of value (a vector)\n\nx = c(1,3,5,3,2,1,4,6,4,7,5,4,3)\n\n# get element from 2 to 6\n\nx[2:6]\n\n# get elements 3 et 5 from x.\n\nx[c(3,5)]\n\n# get value more than 5.\n\nx[x>5]\n\n# get value of  x where x is equal to 5.\n\nx[x==5]\n\n# return elements form x the the value different from 5\n\nx[x!=5] \n```\n\n```{r}\n#Filter a vector according to several criteria\n\n# 3 lists : ages, sexes et poids\n\nage = c(20,30,40,15,22,24,36,38)\n\nsexe = c(\"F\",\"M\",\"F\",\"M\",\"F\",\"M\",\"F\",\"M\")\n\npoids =c(75,76,73,72,64,76,73,72)\n\n# get value from age greater than 20 and less than 30.\n\nage[age>20&age<30]\n\n# Recovering \"poids\" for those who are older than 25 and female\n\npoids[age>25&sexe==\"F\"]\n\n#Retrieve age values below 20 or above 30.\n\nage[age<20|age>30]\n```\n\n\n\n*Exo1*\n\nThis is the vector a=c(\"lannister\", \"targaryen\", \"baratheon\", \"starck\", \"greyjoy\")\n\n1. What is the length of the vector?\n\n2. Try doing a [1:3]. What do you get?\n\n3. Create a new vector b containing only lannister and starck.\n\n4. Try doing a[-1]. What do you get?\n\n5. Sort by alphabetical order. clue: sort ?\n\n*Exo2*\n\n1. Create a vector a containing all integers from 1 to 100.\n\n2. Add the values 200, 201, 202 to the vector a.\n\n3. Create a vector b containing all even integers from 2 to 100. clue : seq?\n\n\n#### [Data frame]{style=\"color: red;\"}\n\nThe data frame is an object composed by vector where the value are [in the different mode}{style=\"color: steelblue;\"} (i.e, numeric, characters...)\n\n##### Exemple of data frame\n\n```{r}\nlibrary(datasets) #load packages with example of datasets\ndata(iris) #loads data frame\nstr(iris) # return the different type of vector\nView(iris) # view data frame in a table\n```\n\n```{r}\n# Get value inside data.frame\niris[3] # to get 3rd value from the first line \niris[3,4] # data[line, column]\niris[5:10,2:4] # to get value from the line 5 to 10  for the columns/variables 2 to 4\niris[5:10,]  # to get value from the line 5 to 10 for all  columns\niris[,3] # to all lines form third column (or vector)\niris$Petal.Length # to all lines form Petal.Length vecotor\n```\n\n##### How to build your own data frame\n\n```{r}\ndate<-c(\"1_monday\",\"2_Tuesday\",\"3_Wednesday\", \"4_Thursday\",\"5_Friday\", \"6_Sturday\", \"7_Sunday\")\ntemperature<-c(24,27,25,22,30,21,28)# deg Celsius\nrain<-c(1,0,0,5,2,0,0)# rain in mm\n\ndf<-data.frame(date, temperature,rain)# makes data.frame\n\n#To select a column or vector. We use $ to target a vector inside a data frame\ndf$temperature\n\ndf$temperature[2] # to obtain the 2nd element of the vector temperature. \n\n# Bonus adding a line in our data frame\nday<-list(\"8_monday\", 29, 1)# here we use list() instead of c() because there is multiple class in inside row\nnew_def<-rbind(df,day)# add row to a data frame\nnew_def\n```\n\n## [IV-Some useful functions on data frame]{style=\"color: steelblue;\"}\n### Definition\nThe function are a compilation of command line with different instructions inside one object to simplify code. A function is composed by <span style=\"color: steelblue;\">**arguments**</span> and <span style=\"color: steelblue;\">**options**</span>.\n\nfunction(argument1, argument2, option1, ... ,option10)\n\n\n### Usual functions for data frame\n\n```{r eval=FALSE}\nhead() # to know first line of your data frame\nclass()# return the class of the object. Ex : data.frame, matrix, list ....\nstr()# return the structure of the object. Ex : numeric, factor, character....\nnames()# to get or set the names of an object\nsum() # for addition\nmin() # return the minimum of the vector\nmax() # return the minimum of the vector\nrow.names() # attribute names for lines of the data frame\ncolnames() # attribute names for column of the data frame\napply() # Returns a vector or array or list of values obtained by applying a function to margins of an array or matrix.\n```\n\n\n**Example function row.names, class and str**\n```{r}\ndf2 <- data.frame(x = c(TRUE, FALSE, NA, NA), y = c(12, 34, 56, 78))\ndf2\nrow.names(df2) <- 1 : 4 # give number of lines as names of the row\ncolnames(df2) <- c(\"Ilove\", \"R\")\ndf2 # what do you see\nclass(df2)\nstr(df2)\n```\n\n\n**Example function apply**\n\n```{r}\nhead(df)\nclass(df)\nstr(df)\napply(df[,2:3], 2, mean)# return mean for the numerical column of the data.frame. apply(data,margin,fun). For margin parameter the value 1 return mean for each row, for margin=2 return mean for each selected column.\n```\n\n*Exo 3*\n\n**From data set iris in package **datasets** Load package datasets and load data set iris using `data()`\n\n1.  Give the class Sepal.Width and Species vectors\n2.  What is the minimum / maximum / average sepal length of these irises?\n3.  What are the values of the first 10 irises?\n4.  Calculate standard deviation for every numeric vector (function : `sd()`)\n5.  Calculate mean for every numeric vector\n6.  Create a data frame with mean and sd as line and give a name for each line\n7.  An error of 0.5cm was made in the measurement of the length of the sepal of the 41st iris: add 0.5cm to this measurement\n\n### Use Tidyverse package to select, filter data in a data frame\n\n[\"tidyverse\"](https://www.tidyverse.org/) is the contraction of \"tidy\" and \"universe\", it's a tidy universe if we translate word by word. In fact, it is a set of R packages that are designed to work together and thus follow the same code logic and a common grammar.\n\nThe most commonly used tidyverse packages are loaded in your session:\n\n- [`ggplot2`](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)\n- [`dplyr`](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf)\n- [`tidyr`](https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf)\n- [`readr`](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf)\n- [`tibble`](https://r4ds.had.co.nz/tibbles.html)\n- [`stringr`](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)\n\n\n```{r}\ntidyverse::tidyverse_packages()\n```\n\n##### Filter and select variable in data frame\n\n```{r}\ndata(\"iris\")\n#To select a variable with tidyverse\ndplyr::select(iris, Species)\n```\n\n```{r}\n#To select several variables with tidyverse\ndplyr::select(iris,Species, Sepal.Length, Sepal.Width)\n\n# To select several lines inside data frame \ndplyr::slice(iris,22:30)\n# I can affect it to an object \n\nsubdata=dplyr::slice(iris,22:30)\n\n#or choosing different lines\nmyline=c(22, 38, 120) # I build a vector containing the line that I want\ndplyr::slice(iris,myline)\n```\n\n##### Bonus : to pipe many function serval function together\n\nThe pipe <span style=\"color: steelblue;\"> **>|** </span>, or <span style=\"color: steelblue;\">**%>%**</span>, is one of the useful elements of the tidyverse. It allows to structure sequences of operations by minimizing the creation of intermediate objects and by facilitating the addition of a step anywhere in this sequence.\n\nThe useful command to manage data frame : 1) select() to select vector or variable from a data frame ; 2) filter() is used to subset a data frame, retaining all rows that satisfy your conditions ; mutate() adds new variables and preserves existing ones.\n\n\n```{r}\nlibrary(dplyr)\niris %>%\nfilter(Sepal.Length > 6) %>% # filtered using size of Sepal Length\nfilter(Species == \"versicolor\") # and the species \n\n```\n\n```{r}\niris %>%\n select(Sepal.Length, Species) %>%\n mutate(Sepal.Length2 = Sepal.Length * 2)%>%\n mutate(Sepal.Length2_squared = Sepal.Length2 * Sepal.Length2)\n\niris %>%\n  select(Sepal.Length, Species) %>%\n  mutate(Sepal.Length = Sepal.Length / mean(Sepal.Length, na.rm = TRUE))\n\n#Sepal.Length_norm is calculated using the mean of the Sepal.Length for all data set.\n\niris %>%\n  select(Sepal.Length, Species) %>%\n  group_by(Species) %>%\n  mutate(Sepal.Length_norm = Sepal.Length / mean(Sepal.Length, na.rm = TRUE))\n\n# In this last example Sepal.Length_norm is calculated using the mean of the Sepal.Length for each species using group_by()\n```\n\n**<span style=\"color: red;\"> These commands are non-persistent, no changes are made on the original iris data frame.</span>**\n**<span style=\"color: red;\">If you want to store it, you must assign your changes to a object</span>**\n\n\n```{r}\niris_modif<-iris %>%\n  select(Sepal.Length, Species) %>%\n  group_by(Species) %>%\n  mutate(Sepal.Length_norm = Sepal.Length / mean(Sepal.Length, na.rm = TRUE))\n```\n\n\n## [V-How to import external data frame issue from .txt or .csv]{style=\"color: steelblue;\"}\n\nTo import data set, the function read.table() or read.csv() commonly use.\n\n`read.table(file, header = FALSE, sep = \"\", dec = \".\", ...)`\n\nThe main parameter are :\n\n- **file** : add the pathway and the name of the file\n- **header** : a logical value (TRUE or FALSE)indicating whether the file contains the names of the variables as its first line. \n- **sep** : the field separator character. Values on each line of the file are separated by this character. If sep = \"\" (the default for read.table) the separator is ‘white space’, that is one or more spaces, tabs, newlines or carriage returns.\n- **dec** : the character used in the file for decimal points.\n\n```{r eval=FALSE}\nds <- read.table(here::here(\"data\",\n                            \"rforbeginers\",\n                            \"exemple_read.txt\"),\n                 header = TRUE,\n                 sep = \";\",\n                 dec = \",\")\n```\n\n\n<span style=\"color: steelblue;\">Why I use the parameter header=TRUE ?</span>\n\n#### To export data set as .txt to read in excel\n\nThe function is *write.table* similar to *read.table*\n\n`write.table(x, file = \"\", sep = \" \",na = \"NA\", dec = \".\", ... )`\n\n- **x** : this is your data.frame()\n- **file** : give a name for your file\n- **sep** : cf read.table\n- **dec** : cf read.table\n- **na** : give a symbole for missing data, by convention is NA\n\n```{r eval=FALSE}\nwrite.table(ds, \"ds.txt\", sep=\"\\t\", dec=\".\")\n```\n\nExo 4\n\n1. In the dataset Iris select Sepal Width, Sepal length and  Species,to create a new data frame name \"subset_iris\"\n2. Save this new data frame as text file \n\n## [VI-How to represent your data]{style=\"color: steelblue;\"}\n\n**ggplot2** is a powerfull packages to make a very smart graph \"ready to use\" for publication. **gg** means grammar and graph, a concept which describe a graph using grammar. This package belong to tidyverse according to `dplyr`. According to the ggplot2 concept, a graph can be divided into different basic parts:**Plot = data + Aesthetics + Geometry**\n\n- *data* : data frame\n- *aesthetics* : allows to indicate the x and y variables. It can also be used to control the color, size and shape of the points, etc...\n- *geometry* : corresponds to the type of graph (histogram, box plot, line plot, .....)\n\n```{r}\nlibrary(ggplot2)\n# scatter plot \nggplot(data = iris, aes(Sepal.Length, Sepal.Width))+ #  what I want to represent \n  geom_point() # how I represent it \n```\n\n```{r}\n# We can calorize and give a shape by month \n# scatter plot \nggplot(data = iris, aes(Sepal.Length, Sepal.Width))+ \n  geom_point(aes(color = Species, shape = Species)) # shape is the same thing with classical plot on R\n```\n```{r}\n# You can change manually color with la fonction scale_color_manual()\nggplot(data = iris, aes(Sepal.Length, Sepal.Width))+  \n geom_point(aes(color = Species, shape = Species))  +\n  scale_color_manual(values = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"))\n```\n```{r}\n#Boxplot \nggplot(data = iris, aes(Species, Sepal.Length))+ #  what I want to represent \n  geom_boxplot(aes(color=Species, fill=Species), alpha=0.4)+# how I represent it. Here I changed geometry using boxplot.\n  labs(x=\"Species\", y=\"Sepal.Length (mm)\")+\n  theme_minimal()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"Tuto1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Tuto1"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}